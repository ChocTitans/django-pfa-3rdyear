                    getDays()                                                                                                                    Get the days of the week
 * @method string|null                                        getFallbackLocale()                                                                                                          Get the fallback locale.
 * @method array                                              getFormatsToIsoReplacements()                                                                                                List of replacements from date() format to isoFormat().
 * @method int                                                getHumanDiffOptions()                                                                                                        Return default humanDiff() options (merged flags as integer).
 * @method array                                              getIsoUnits()                                                                                                                Returns list of locale units for ISO formatting.
 * @method array                                              getLastErrors()                                                                                                              {@inheritdoc}
 * @method string                                             getLocale()                                                                                                                  Get the current translator locale.
 * @method callable|null                                      getMacro($name)                                                                                                              Get the raw callable macro registered globally for a given name.
 * @method int                                                getMidDayAt()                                                                                                                get midday/noon hour
 * @method Closure|CarbonImmutable                            getTestNow()                                                                                                                 Get the Carbon instance (real or mock) to be returned when a "now"
 *                                                                                                                                                                                         instance is created.
 * @method string                                             getTimeFormatByPrecision($unitPrecision)                                                                                     Return a format from H:i to H:i:s.u according to given unit precision.
 * @method string                                             getTranslationMessageWith($translator, string $key, ?string $locale = null, ?string $default = null)                         Returns raw translation message for a given key.
 * @method \Symfony\Component\Translation\TranslatorInterface getTranslator()                                                                                                              Get the default translator instance in use.
 * @method int                                                getWeekEndsAt()                                                                                                              Get the last day of week
 * @method int                                                getWeekStartsAt()                                                                                                            Get the first day of week
 * @method array                                              getWeekendDays()                                                                                                             Get weekend days
 * @method bool                                               hasFormat($date, $format)                                                                                                    Checks if the (date)time string is in a given format.
 * @method bool                                               hasFormatWithModifiers($date, $format)                                                                                       Checks if the (date)time string is in a given format.
 * @method bool                                               hasMacro($name)                                                                                                              Checks if macro is registered globally.
 * @method bool                                               hasRelativeKeywords($time)                                                                                                   Determine if a time string will produce a relative date.
 * @method bool                                               hasTestNow()                                                                                                                 Determine if there is a valid test instance set. A valid test instance
 *                                                                                                                                                                                         is anything that is not null.
 * @method CarbonImmutable                                    instance($date)                                                                                                              Create a Carbon instance from a DateTime one.
 * @method bool                                               isImmutable()                                                                                                                Returns true if the current class/instance is immutable.
 * @method bool                                               isModifiableUnit($unit)                                                                                                      Returns true if a property can be changed via setter.
 * @method bool                                               isMutable()                                                                                                                  Returns true if the current class/instance is mutable.
 * @method bool                                               isStrictModeEnabled()                                                                                                        Returns true if the strict mode is globally in use, false else.
 *                                                                                                                                                                                         (It can be overridden in specific instances.)
 * @method bool                                               localeHasDiffOneDayWords($locale)                                                                                            Returns true if the given locale is internally supported and has words for 1-day diff (just now, yesterday, tomorrow).
 *                                                                                                                                                                                         Support is considered enabled if the 3 words are translated in the given locale.
 * @method bool                                               localeHasDiffSyntax($locale)                                                                                                 Returns true if the given locale is internally supported and has diff syntax support (ago, from now, before, after).
 *                                                                                                                                                                                         Support is considered enabled if the 4 sentences are translated in the given locale.
 * @method bool                                               localeHasDiffTwoDayWords($locale)                                                                                            Returns true if the given locale is internally supported and has words for 2-days diff (before yesterday, after tomorrow).
 *                                                                                                                                                                                         Support is considered enabled if the 2 words are translated in the given locale.
 * @method bool                                               localeHasPeriodSyntax($locale)                                                                                               Returns true if the given locale is internally supported and has period syntax support (X times, every X, from X, to X).
 *                                                                                                                                                                                         Support is considered enabled if the 4 sentences are translated in the given locale.
 * @method bool                                               localeHasShortUnits($locale)                                                                                                 Returns true if the given locale is internally supported and has short-units support.
 *                                                                                                                                                                                         Support is considered enabled if either year, day or hour has a short variant translated.
 * @method void                                               macro($name, $macro)                                                                                                         Register a custom macro.
 * @method CarbonImmutable|null                               make($var)                                                                                                                   Make a Carbon instance from given variable if possible.
 *                                                                                                                                                                                         Always return a new instance. Parse only strings and only these likely to be dates (skip intervals
 *                                                                                                                                                                                         and recurrences). Throw an exception for invalid format, but otherwise return null.
 * @method CarbonImmutable                                    maxValue()                                                                                                                   Create a Carbon instance for the greatest supported date.
 * @method CarbonImmutable                                    minValue()                                                                                                                   Create a Carbon instance for the lowest supported date.
 * @method void                                               mixin($mixin)                                                                                                                Mix another object into the class.
 * @method CarbonImmutable                                    now($tz = null)                                                                                                              Get a Carbon instance for the current date and time.
 * @method CarbonImmutable                                    parse($time = null, $tz = null)                                                                                              Create a carbon instance from a string.
 *                                                                                                                                                                                         This is an alias for the constructor that allows better fluent syntax
 *                                                                                                                                                                                         as it allows you to do Carbon::parse('Monday next week')->fn() rather
 *                                                                                                                                                                                         than (new Carbon('Monday next week'))->fn().
 * @method CarbonImmutable                                    parseFromLocale($time, $locale = null, $tz = null)                                                                           Create a carbon instance from a localized string (in French, Japanese, Arabic, etc.).
 * @method string                                             pluralUnit(string $unit)                                                                                                     Returns standardized plural of a given singular/plural unit name (in English).
 * @method CarbonImmutable|false                              rawCreateFromFormat($format, $time, $tz = null)                                                                              Create a Carbon instance from a specific format.
 * @method CarbonImmutable                                    rawParse($time = null, $tz = null)                                                                                           Create a carbon instance from a string.
 *                                                                                                                                                                                         This is an alias for the constructor that allows better fluent syntax
 *                                                                                                                                                                                         as it allows you to do Carbon::parse('Monday next week')->fn() rather
 *                                                                                                                                                                                         than (new Carbon('Monday next week'))->fn().
 * @method CarbonImmutable                                    resetMacros()                                                                                                                Remove all macros and generic macros.
 * @method void                                               resetMonthsOverflow()                                                                                                        @deprecated To avoid conflict between different third-party libraries, static setters should not be used.
 *                                                                                                                                                                                                     You should rather use the ->settings() method.
 *                                                                                                                                                                                                     Or you can use method variants: addMonthsWithOverflow/addMonthsNoOverflow, same variants
 *                                                                                                                                                                                                     are available for quarters, years, decade, centuries, millennia (singular and plural forms).
 * @method void          